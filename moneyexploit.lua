--[[
    ╔═══════════════════════════════════════════════════════════╗
    ║                    ADMIN LIBRARY v1.0                     ║
    ║          Bibliothèque de gestion économie Roblox          ║
    ╚═══════════════════════════════════════════════════════════╝
    
    📦 INSTALLATION:
    Placer ce script dans ReplicatedStorage en tant que ModuleScript
    nommé "AdminLib"
    
    📝 UTILISATION:
    local AdminLib = require(game.ReplicatedStorage.AdminLib)
    AdminLib:GiveMoney(player, 1000)
    
    ⚠️ NOTE: Ce système fonctionne en client-side uniquement.
    Pour une vraie sécurité, utilisez RemoteEvents côté serveur.
]]

local Players = game:GetService("Players")

local AdminLib = {}
AdminLib.__index = AdminLib

-- ═══════════════════════════════════════════════════════════
-- CONFIGURATION
-- ═══════════════════════════════════════════════════════════

AdminLib.Config = {
    -- Noms possibles pour la valeur d'argent dans leaderstats
    MoneyNames = {"Cash", "Money", "Coins", "Credits", "Currency"},
    
    -- Logs d'actions
    EnableLogs = true,
    
    -- Limite maximale d'argent
    MaxMoney = 999999999,
}

-- ═══════════════════════════════════════════════════════════
-- FONCTIONS UTILITAIRES PRIVÉES
-- ═══════════════════════════════════════════════════════════

local function Log(message)
    if AdminLib.Config.EnableLogs then
        print("[AdminLib]", message)
    end
end

local function GetMoneyValue(player)
    if not player or not player:FindFirstChild("leaderstats") then
        return nil
    end
    
    for _, name in ipairs(AdminLib.Config.MoneyNames) do
        local moneyValue = player.leaderstats:FindFirstChild(name)
        if moneyValue then
            return moneyValue
        end
    end
    
    return nil
end

local function ClampMoney(amount)
    return math.clamp(amount, 0, AdminLib.Config.MaxMoney)
end

-- ═══════════════════════════════════════════════════════════
-- GESTION DE L'ARGENT
-- ═══════════════════════════════════════════════════════════

--[[
    Donne de l'argent à un joueur
    @param player: Player - Le joueur cible
    @param amount: number - Le montant à ajouter
    @return boolean - Succès de l'opération
]]
function AdminLib:GiveMoney(player, amount)
    local moneyValue = GetMoneyValue(player)
    if not moneyValue then
        Log("❌ Impossible de trouver la valeur d'argent pour " .. player.Name)
        return false
    end
    
    local newAmount = ClampMoney(moneyValue.Value + amount)
    moneyValue.Value = newAmount
    Log("✅ " .. amount .. "$ donné à " .. player.Name .. " (Total: " .. newAmount .. "$)")
    return true
end

--[[
    Définit l'argent d'un joueur
    @param player: Player - Le joueur cible
    @param amount: number - Le nouveau montant
    @return boolean - Succès de l'opération
]]
function AdminLib:SetMoney(player, amount)
    local moneyValue = GetMoneyValue(player)
    if not moneyValue then
        Log("❌ Impossible de trouver la valeur d'argent pour " .. player.Name)
        return false
    end
    
    local newAmount = ClampMoney(amount)
    moneyValue.Value = newAmount
    Log("✅ Argent de " .. player.Name .. " défini à " .. newAmount .. "$")
    return true
end

--[[
    Retire de l'argent à un joueur
    @param player: Player - Le joueur cible
    @param amount: number - Le montant à retirer
    @return boolean - Succès de l'opération
]]
function AdminLib:RemoveMoney(player, amount)
    local moneyValue = GetMoneyValue(player)
    if not moneyValue then
        Log("❌ Impossible de trouver la valeur d'argent pour " .. player.Name)
        return false
    end
    
    local newAmount = ClampMoney(moneyValue.Value - amount)
    moneyValue.Value = newAmount
    Log("✅ " .. amount .. "$ retiré à " .. player.Name .. " (Total: " .. newAmount .. "$)")
    return true
end

--[[
    Obtient l'argent actuel d'un joueur
    @param player: Player - Le joueur cible
    @return number - Le montant actuel (0 si erreur)
]]
function AdminLib:GetMoney(player)
    local moneyValue = GetMoneyValue(player)
    if not moneyValue then
        return 0
    end
    return moneyValue.Value
end

--[[
    Multiplie l'argent d'un joueur
    @param player: Player - Le joueur cible
    @param multiplier: number - Le multiplicateur
    @return boolean - Succès de l'opération
]]
function AdminLib:MultiplyMoney(player, multiplier)
    local currentMoney = self:GetMoney(player)
    local newAmount = currentMoney * multiplier
    return self:SetMoney(player, newAmount)
end

--[[
    Réinitialise l'argent d'un joueur à 0
    @param player: Player - Le joueur cible
    @return boolean - Succès de l'opération
]]
function AdminLib:ResetMoney(player)
    return self:SetMoney(player, 0)
end

-- ═══════════════════════════════════════════════════════════
-- GESTION DES JOUEURS
-- ═══════════════════════════════════════════════════════════

--[[
    Obtient tous les joueurs actuels
    @return table - Liste des joueurs
]]
function AdminLib:GetAllPlayers()
    return Players:GetPlayers()
end

--[[
    Obtient les noms de tous les joueurs
    @return table - Liste des noms de joueurs
]]
function AdminLib:GetPlayerNames()
    local names = {}
    for _, player in ipairs(Players:GetPlayers()) do
        table.insert(names, player.Name)
    end
    return names
end

--[[
    Trouve un joueur par son nom (partiel)
    @param name: string - Nom ou partie du nom
    @return Player|nil - Le joueur trouvé ou nil
]]
function AdminLib:FindPlayer(name)
    name = string.lower(name)
    for _, player in ipairs(Players:GetPlayers()) do
        if string.lower(player.Name):find(name) then
            return player
        end
    end
    return nil
end

-- ═══════════════════════════════════════════════════════════
-- OPÉRATIONS EN MASSE
-- ═══════════════════════════════════════════════════════════

--[[
    Donne de l'argent à tous les joueurs
    @param amount: number - Le montant à donner à chacun
    @return number - Nombre de joueurs affectés
]]
function AdminLib:GiveMoneyToAll(amount)
    local count = 0
    for _, player in ipairs(self:GetAllPlayers()) do
        if self:GiveMoney(player, amount) then
            count = count + 1
        end
    end
    Log("✅ " .. amount .. "$ donné à " .. count .. " joueur(s)")
    return count
end

--[[
    Réinitialise l'argent de tous les joueurs
    @return number - Nombre de joueurs affectés
]]
function AdminLib:ResetAllMoney()
    local count = 0
    for _, player in ipairs(self:GetAllPlayers()) do
        if self:ResetMoney(player) then
            count = count + 1
        end
    end
    Log("✅ Argent réinitialisé pour " .. count .. " joueur(s)")
    return count
end

-- ═══════════════════════════════════════════════════════════
-- STATISTIQUES
-- ═══════════════════════════════════════════════════════════

--[[
    Obtient le joueur le plus riche
    @return Player|nil, number - Le joueur et son argent
]]
function AdminLib:GetRichestPlayer()
    local richest = nil
    local maxMoney = 0
    
    for _, player in ipairs(self:GetAllPlayers()) do
        local money = self:GetMoney(player)
        if money > maxMoney then
            maxMoney = money
            richest = player
        end
    end
    
    return richest, maxMoney
end

--[[
    Obtient l'argent total dans l'économie
    @return number - Somme totale de l'argent
]]
function AdminLib:GetTotalMoney()
    local total = 0
    for _, player in ipairs(self:GetAllPlayers()) do
        total = total + self:GetMoney(player)
    end
    return total
end

--[[
    Obtient la moyenne d'argent par joueur
    @return number - Moyenne d'argent
]]
function AdminLib:GetAverageMoney()
    local players = self:GetAllPlayers()
    if #players == 0 then return 0 end
    return self:GetTotalMoney() / #players
end

-- ═══════════════════════════════════════════════════════════
-- UTILITAIRES
-- ═══════════════════════════════════════════════════════════

--[[
    Formate un nombre avec des séparateurs
    @param number: number - Le nombre à formater
    @return string - Nombre formaté (ex: 1,000,000)
]]
function AdminLib:FormatMoney(number)
    local formatted = tostring(math.floor(number))
    local k
    while true do
        formatted, k = string.gsub(formatted, "^(-?%d+)(%d%d%d)", '%1,%2')
        if k == 0 then break end
    end
    return formatted .. "$"
end

--[[
    Vérifie si un joueur peut se permettre un montant
    @param player: Player - Le joueur à vérifier
    @param amount: number - Le montant requis
    @return boolean - true si le joueur a assez d'argent
]]
function AdminLib:CanAfford(player, amount)
    return self:GetMoney(player) >= amount
end

-- ═══════════════════════════════════════════════════════════

Log("📦 AdminLib chargé avec succès!")

return AdminLib